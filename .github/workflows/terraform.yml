name: terraform deploy

on:
  push:
    paths:
      - '.github/workflows/terraform.yml'
    branches:
      - main
  workflow_run:
    workflows: build
    types:
      - completed
  workflow_dispatch:

jobs:
  Google-Auth_Docker-pull:
    name: 'Login to GCP and DockerHub'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Download container
        run: docker pull ventureronin/tg_weatherbot:latest

#      - name: Decode credentials
#        run: |
#          echo "${{ secrets.GCP_CREDENTIALS }}" | base64 -d > credentials.json
#          if [ -f "credentials.json" ]; then
#            echo "File credentials.json exists"
#            chmod 777 credentials.json
#            cat credentials.json
#          else
#            echo "File credentials.json does not exist"
#            exit 1
#          fi

      - name: Authenticate to Google Cloud
        id: 'auth'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          #credentials.json
          #service_account: ${{ secrets.SA_ACCOUNT }}

      - name: Login service account
        run: gcloud auth login ${{ secrets.SA_ACCOUNT }}

      - name: Check GCP permissions
        run: gcloud auth list

  Terraform:
    name: 'Terraform set up'
    needs: Google-Auth_Docker-pull
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Define GCP credentials
        run: echo {{ secrets.GCP_CREDENTIALS }} > terraform/credentials.json

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest
          terraform_wrapper: false

      - name: Check dir
        run: |
          ls -la
          ls -la terraform

      - name: Terraform init
        working-directory: terraform
        run: terraform init

      - name: Terraform plan
        working-directory: terraform
        run: terraform plan -lock=false -var="GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}"

# get external ip?
      - name: Terraform apply
        working-directory: terraform
        if: contains(github.event.head_commit.message, 'tf apply')
        run: terraform apply -lock=false -auto-approve -var="GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
        
      - name: Terraform destroy
        working-directory: terraform
        if: contains(github.event.head_commit.message, 'tf destroy')
        run: terraform destroy -lock=false -auto-approve -var="GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}

